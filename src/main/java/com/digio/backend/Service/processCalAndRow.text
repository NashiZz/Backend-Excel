private List<Map<String, Object>> processRowsAndCalculations(Sheet sheet, List<String> headers, List<Integer> selectedIndices, List<String> relation, List<String> calculation) {
        List<Map<String, Object>> resultList = new ArrayList<>();
        List<Map<String, Object>> errorList = new ArrayList<>();
        Map<Integer, String> errorSummaryMap = new TreeMap<>();

        Row headerRow = sheet.getRow(0);
        Map<String, Integer> headerIndexMap = new HashMap<>();
        for (Cell cell : headerRow) {
            String header = cell.getStringCellValue().trim();
            headerIndexMap.put(header, cell.getColumnIndex());
        }

        boolean hasCalculation = calculation != null && calculation.size() == 4;
        String operator = null, addend = null, operand = null, resultKey = null;

        if (hasCalculation) {
            operator = calculation.get(0).trim();
            addend = calculation.get(1).trim();
            operand = calculation.get(2).trim();
            resultKey = calculation.get(3).trim();

            System.out.println("ตรวจสอบการคำนวณ:");
            System.out.println("Addend: " + addend);
            System.out.println("Operand: " + operand);
            System.out.println("Header Index Map: " + headerIndexMap);

            if (!headerIndexMap.containsKey(addend) || !headerIndexMap.containsKey(operand)) {
                System.out.println("ไม่พบหัวข้อที่ใช้คำนวณใน headerIndexMap");
                throw new IllegalArgumentException("หัวข้อที่ใช้คำนวณไม่ตรงกับข้อมูลในไฟล์");
            }
        }

        for (int i = 1; i <= sheet.getLastRowNum(); i++) {
            Row row = sheet.getRow(i);
            Map<String, Object> rowData = new HashMap<>();
            StringBuilder errorBuilder = new StringBuilder();

            for (int colIndex = 0; colIndex < headers.size(); colIndex++) {
                if (selectedIndices != null && !selectedIndices.contains(colIndex)) continue;

                String header = headers.get(colIndex);
                String cellValue = Optional.ofNullable(getCellValue(row.getCell(colIndex)))
                        .map(String::trim)
                        .orElse("");

                String errorMessage = validateCellAndGetMessage(header, cellValue);
                if (!errorMessage.equals("success")) {
                    Map<String, Object> errorDetails = new HashMap<>();
                    errorDetails.put("row", row.getRowNum());
                    errorDetails.put("column", colIndex);
                    errorDetails.put("header", header);
                    errorDetails.put("message", errorMessage);

                    errorList.add(errorDetails);
                    errorBuilder.append(errorMessage).append("; ");
                }
            }

            if (relation != null && !relation.isEmpty()) {
                System.out.println("ตรวจสอบความสัมพันธ์ใน relation:");

                String column1 = relation.get(0).trim();
                String condition = relation.get(1).trim();
                String column2 = relation.get(2).trim();

                System.out.println("Column1: " + column1);
                System.out.println("Condition: " + condition);
                System.out.println("Column2: " + column2);

                String value1 = getCell(row, headerIndexMap.get(column1));
                String value2 = getCell(row, headerIndexMap.get(column2));

                System.out.println("Value1: " + value1);
                System.out.println("Value2: " + value2);

                if (!checkRelation(value1, condition, value2)) {
                    String relationError = "ไม่ตรงกับความสัมพันธ์: " + column1 + " " + condition + " " + column2;

                    Map<String, Object> errorDetails = new HashMap<>();

                    errorDetails.put("row", row.getRowNum());
                    errorDetails.put("column", headerIndexMap.get(column1));
                    errorDetails.put("header", headerIndexMap.get(column1));
                    errorDetails.put("message", relationError);

                    errorList.add(errorDetails);

                    errorBuilder.append(relationError).append("; ");
                    errorSummaryMap.put(row.getRowNum() + 1, errorBuilder.toString().trim());
                }
            }

            if (hasCalculation) {
                double addendValue = getValue(row, headerIndexMap.get(addend));
                double operandValue = getValue(row, headerIndexMap.get(operand));
                double result = 0.0;

                if (addendValue != 0 && operandValue != 0) {
                    System.out.println("คำนวณสำหรับแถว " + row.getRowNum() + ": ");
                    System.out.println("Addend: " + addendValue + ", Operand: " + operandValue);

                    if ("+".equals(operator)) {
                        result = addendValue + operandValue;
                        System.out.println("ผลลัพธ์ ( + ): " + result);
                    } else if ("-".equals(operator)) {
                        result = addendValue - operandValue;
                        System.out.println("ผลลัพธ์ ( - ): " + result);
                    } else if ("x".equals(operator)) {
                        result = addendValue * operandValue;
                        System.out.println("ผลลัพธ์ ( x ): " + result);
                    } else if ("/".equals(operator)) {
                        result = addendValue / operandValue;
                        System.out.println("ผลลัพธ์ ( / ): " + result);
                    } else {
                        String calcError = "ไม่รองรับเครื่องหมายการคำนวณ: " + operator;
                        System.out.println(calcError);
                        throw new IllegalArgumentException(calcError);
                    }

                    if (headerIndexMap.containsKey(resultKey)) {
                        double expectedBalance = getValue(row, headerIndexMap.get(resultKey));
                        if (result != expectedBalance) {
                            String calcError = resultKey + ": คาดหวัง " + result + " แต่ในไฟล์ได้ " + expectedBalance;

                            Map<String, Object> errorDetails = new HashMap<>();
                            errorDetails.put("row", row.getRowNum());
                            errorDetails.put("column", headerIndexMap.get(resultKey));
                            errorDetails.put("header", resultKey);
                            errorDetails.put("message", calcError);

                            errorList.add(errorDetails);
                            errorBuilder.append(calcError).append("; ");

                            errorSummaryMap.put(row.getRowNum() + 1, errorBuilder.toString().trim());
                            System.out.println("ข้อผิดพลาด: " + calcError);
                        }
                    }

                    if (errorBuilder.isEmpty()) {
                        rowData.put(resultKey, result);
                    }
                }
            }

            if (!errorBuilder.isEmpty()) {
                errorSummaryMap.put(row.getRowNum() + 1, errorBuilder.toString().trim());
            } else {
                resultList.add(rowData);
            }
        }

        List<String> errorSummaryList = formatErrorMessages(errorSummaryMap);

        System.out.println("Error Summary List:");
        for (String error : errorSummaryList) {
            System.out.println(error);
        }

        if (!errorList.isEmpty()) {
            Set<Map<String, Object>> uniqueErrors = new HashSet<>(errorList);

            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("summary", "Errors found");
            errorResponse.put("errorList", new ArrayList<>(uniqueErrors));
            errorResponse.put("errorDetails", errorSummaryList);

            return List.of(errorResponse);
        }

        return resultList.isEmpty() || resultList.stream().allMatch(Map::isEmpty) ? Collections.emptyList() : resultList;
    }